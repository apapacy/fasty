#!/usr/bin/env node
"use strict"

var argv = require('yargs').argv
var colors = require('colors')
var request = require('request')
var _ = require('lodash')
var chokidar = require('chokidar')
const notifier = require('node-notifier')
var yaml = require('js-yaml');

var fs = require('fs')
var dirname = process.cwd()
if(!fs.existsSync(dirname + '/.tokens.yml')) {
  console.log("Please configure a .tokens.yml file for tokens".red)
  process.exit()
}

var tokens = yaml.safeLoad(fs.readFileSync(dirname + '/.tokens.yml', 'utf8'));

var check_json = function(json, domain, fullname) {
  _.each(json, function(v, k) {
    var pathname = 'fs/' + domain + '/' + k
    if(!fs.existsSync(pathname)) fs.mkdirSync(pathname)
    _.each(json[k], function(v2, k2) {
      var endpathname = pathname + '/' + k2
      if(!fs.existsSync(endpathname)) fs.mkdirSync(endpathname)
      _.each(v2, function(obj) {
        var header = "#SOLICMS " + obj.id + " " + k2 + " " + k

        if(k2 == "layouts") {
          fs.writeFileSync(endpathname + '/' + obj.filename + '.html', header + " html\n" + obj.html)
          fs.writeFileSync(endpathname + '/' + obj.filename + '.scss', header + " css\n" + obj.css)
          fs.writeFileSync(endpathname + '/' + obj.filename + '.js', header + " js\n" + obj.js)
          fs.writeFileSync(endpathname + '/' + obj.filename + '.css.txt', header + " css_assets\n" + obj.css_assets)
          fs.writeFileSync(endpathname + '/' + obj.filename + '.js.txt', header + " js_assets\n" + obj.js_assets)
        }
        if(k2 == "csses") {
          fs.writeFileSync(endpathname + '/' + obj.filename + '.scss', header + " css\n" + obj.css)
        }
        if(k2 == "javascripts") {
          fs.writeFileSync(endpathname + '/' + obj.filename + '.js', header + " js\n" + obj.js)
        }
        if(k2 == "components") {
          fs.writeFileSync(endpathname + '/' + obj.filename + '.html', header + " html\n" + obj.html)
          if(obj.css) fs.writeFileSync(endpathname + '/' + obj.filename + '.css', header + " css\n" + obj.css)
          if(obj.js) fs.writeFileSync(endpathname + '/' + obj.filename + '.js', header + " js\n" + obj.js)
        }
        if(k2 == "partials") {
          if(obj.mu) fs.writeFileSync(endpathname + '/' + obj.filename + '.mu', header + " mu\n" + obj.mu)
          fs.writeFileSync(endpathname + '/' + obj.filename + '.erb', header + " erb\n" + obj.erb)
          if(obj.tablet_mu) fs.writeFileSync(endpathname + '/' + obj.filename + '.tablet.mu', header + " tablet_mu\n" + obj.tablet_mu)
          if(obj.tablet_erb) fs.writeFileSync(endpathname + '/' + obj.filename + '.tablet.erb', header + " tablet_erb\n" + obj.tablet_erb)
          if(obj.mobile_mu) fs.writeFileSync(endpathname + '/' + obj.filename + '.mobile.mu', header + " mobile_mu\n" + obj.mobile_mu)
          if(obj.mobile_erb) fs.writeFileSync(endpathname + '/' + obj.filename + '.mobile.erb', header + " mobile_erb\n" + obj.mobile_erb)
        }
        if(k2 == "spas") {
          if(obj.js) fs.writeFileSync(endpathname + '/' + obj.filename + '.js', header + " js\n" + obj.js)
          if(obj.components) fs.writeFileSync(endpathname + '/' + obj.filename + '.components', header + " components\n" + obj.components)
        }
        if(k2 == "pages") {
          if(obj.widgets.length > 0) {
            if(!fs.existsSync(endpathname + "/" + obj.filename)) fs.mkdirSync(endpathname + "/" + obj.filename)
            _.each(obj.widgets, function(w) {
              header = "#SOLICMS " + w.id + " widgets " + k
              fs.writeFileSync(endpathname + '/' + obj.filename + '/'+ w.id + '.html', header + " content\n" + w.content)
            })
          }
        }

      })
    })
  })

  if(argv.w) {
    console.log("Watching folder.", dirname + '/fs/'+domain)
    chokidar.watch(dirname + '/fs/'+domain, {ignored: /(^|[\/\\])\../}).on('all', (event, path) => {
      if(event == "add") {
        console.log(`Added : ${path}`.cyan)
      }
      if(event == "change") {
        console.log(`Modifying : ${path}`.magenta.italic)
        setTimeout(function() {
          fs.readFile(path, function(err, data) {
            if(data.length > 0) {
              var url = 'http://' + domain + "/api/update/?token=" + token
              request.patch({
                url: url,
                formData: {
                  data: data,
                  name: fullname
                }
              }, function optionalCallback(err, httpResponse, body) {
                console.log(body.green)
                notifier.notify("SoliCMS :: " + body);
              })
            } else {
              console.log('something went wrong ... please try again'.red)
            }
          })
        }, 100)

      }
    })
  }
}

if(argv._.length != 1) {
  console.log("usage : solicms <shortuct> -w".yellow)
} else {
  var fullname = tokens['name']
  var domain = tokens['domains'][argv._[0]].domain
  var token  = tokens['domains'][argv._[0]].token

  if(token === undefined) {
    console.log("Token not found for this domain".red)
    process.exit()
  }
  var url = 'http://' + domain + "/api/filenames/?token=" + token

  if(!fs.existsSync('fs')) fs.mkdirSync('fs')
  if(!fs.existsSync('fs/'+ domain)) fs.mkdirSync('fs/' + domain)

  if(argv.w) {
    console.log("Fetching data ...".green)
    request(url, function (error, response, body) {
      var data = JSON.parse(body); // Print the HTML for the Google homepage.
      check_json(data, domain, fullname)
    });
  }

  if(argv.c && argv.f) {
    var url = 'http://' + domain + "/api/create/?token=" + token

    request.post({
      url: url,
      formData: {
        type: argv.c,
        name: argv.f,
        fullname: fullname
      }
    }, function optionalCallback(err, httpResponse, body) {
      var url = 'http://' + domain + "/api/filenames/?token=" + token + '&type=' + argv.c + '&id=' + body
      console.log(body)
      notifier.notify("SoliCMS :: File Create !");
      console.log("Fetching data ...".green)
      request(url, function (error, response, body2) {
        console.log(body2)
        var data = JSON.parse(body2); // Print the HTML for the Google homepage.
        check_json(data, domain)
      });
    })
  }

}


